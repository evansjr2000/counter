@* Counter. C program to generate counters for html documents. This
program runs as a cgi-bin script and is called by an httpd daemon.  By
default the routine will initialize a counter to zero, but you can
initialize it to some other value. Also an option to NOT increment the
counter can be used. This program was based on a ``buggy''  perl script
that did the same thing. It was buggy because files on our busy server
were occasionally reset to zero. I believe this was caused by a race
condition between multiple copies of the program accessing the counter
file simultaneously. By using POSIX record locking this problem has not
re-occurred.

Modified on May 11, 1997 to do permission checking. This was do to the
fact that I was getting over a million hits a week, and someone in
management was notified that lots of porno sites were using it. So, to
keep the service going, I had to limit access to selected sites.

@ This program is written in WEB, a preprocessor for C or Pascal. This
style of programming is called ``Literate Programming.'' For Further
information see the paper Literate Programming, by Donald Knuth in The
Computer Journal, Vol 27, No. 2, 1984; or the book Weaving a Program:
Literate Programming in WEB by Wayne Sewell, Van Nostrand Reinhold,
1989.  Another good source of information is the Usenet group
comp.programming.literate. It has information on new tools and a FAQ
(Frequently Asked Questions).

@ Everything is top down. Here is the first macro section that will then
define all the other sections.
@c
@< Program @>

@ Here is the top down structure of this program.
@< Program @>=
@< Global |#includes| @>
@< Global structures @>
@< Global variables @>
@< Utility functions @>
@< Main @>

@ I need these standard include files.
@< Global |#includes| @>=
#include <stdio.h>
#include <stdlib.h>

@ Self explanatory. Standard structure for getting environment variables
when in a cgi-bin script.
@< Global structures @>=
typedef struct {
    char name[128]; char val[128]; } entry;

@ Prototypes. These are routines that came with NCSAs httpd software.
@< Global variables @>=
void getword (char *word , char * line , char *stop );
char x2c(char *what);
void unescape_url(char *url);
void plustospace(char *str);

@ Here I define all the environment varaibles that are supposed to be
available to cgi-bin scripts. I also added |REFERER_URL| to check who is
using the program. (This also meant that I had to slightly modify the
file cgi.c of the NCSA httpd source to support a new environment
variable.)
@d NUM_EVARS 17
@< Global variables @>=
static char *enames[]= {"SERVER_SOFTWARE","SERVER_NAME","GATEWAY_INTERFACE",
"SERVER_PROTOCOL", "SERVER_PORT", "REQUEST_METHOD", "HTTP_ACCEPT",
"PATH_INFO", "PATH_TRANSLATED", "SCRIPT_NAME", "QUERY_STRING",
"REMOTE_HOST", "REMOTE_ADDR", "REMOTE_USER", "CONTENT_TYPE",
"CONTENT_LENGTH", "REFERER_URL"};

@ Here is the main routine. Everything is modularized using literate
programming modules which are supposed to be self-documenting.
@< Main @>=
int main(int argc,char *argv[]) {
entry entries[100];
register int x, m = 0; int i; char *cl; @;
@< Local variables @> @;
@< Check access privileges of referer @> @;
@< Decode |QUERY_STRING| @>
@< Convert options to uppercase @>
@< Set options @>
@< Open file @> @;
finis : @< Generate bitmap @> @;
exit(0);
}

@ List of permitted sites.
@d P_NUM 9
@< Global variables @>=
static char *p_sites[] = {".mil/",".edu/",".org/","www.parentinglaw.com/",
"www.americasnet.com/", "www.mmu.ac.uk/", "home.earthlink.net/",
".bienlogic.com/", "www.vol.it/"};
char *cl, *cl2, *ptr;
int priv_found;


@
@< Check access privileges of referer@>=
#if defined (DEBUG)
printf("Checkingaccessprivilegesofcounterrequester.\n");
#endif
cl = getenv ("REFERER_URL");
if (cl == NULL) {
#if defined (DEBUG)
printf("Whoaman!!YourhttpddoesnotsupportREFERER_URL.\n");
#endif
cl = (char *) malloc(80);
strcpy (cl,"http://white.nosc.mil/~evansjr/referer/");
}
#if defined (DEBUG)
printf ("cl=%s.\n", cl );
#endif
@< Parse URL @> @;
priv_found = FALSE;
for (i=0; i<P_NUM; i++) {
#if defined(DEBUG)
printf("Comparing%swith%s.\n", cl , p sites [i]);
#endif
if ((ptr = strstr(cl, p_sites [i])) == NULL) {
    priv_found = TRUE;
    i = P_NUM;
    }
}
if (priv_found == FALSE) {
   counter = 0;
   do_invisible = FALSE;
#if defined (DEBUG)
    printf ("NOPRIVELEGES!\n");
#endif
goto finis;
}

@ 
@< Parse URL @>=
#if defined (DEBUG)
printf ("Parsing␣URL␣%s.\n", cl );
#endif
cl2 =strstr(cl,"http://");
if (cl2 == NULL) {
#if defined (DEBUG)
    printf ("␣Whoa␣man!!␣No␣http␣string␣in␣REFERER_URL.\n");
#endif
}
ptr = (cl2 + 7);
for (i=0; i<200; i++) {
    cl[i] = ptr [i];
    if (ptr[i] == '/') {
       cl[i + 1]=0;
       i = 200;
       }
}

@ Stolen from query.c. However I modified |getword()| because it is evidently
``bad-form'' to use character in html files. 
@< Decode |QUERY_STRING| @>=
cl = getenv ("QUERY_STRING"); if (cl == NULL) {
    printf ("No␣query␣information␣to␣decode.\n");
    exit (1); \
    }
#if defined (DEBUG)
printf ("Your␣query␣string␣is␣%s.\n", cl );
#endif
for (x = 0; cl[0] != '\0' ; x++) {
    m = x;
    getword (entries[x].val , cl , "&:;"); plustospace (entries [x].val );
    unescape_url(entries[x].val);
    getword (entries[x].name , entries[x].val , "=");
    }

@ Make options case insensitive.
@< Convert options to uppercase @>=
for (x = 1; x <= m; x++) {
    for (i = 0; entries[x].name[i] != '\0'; i++) {
    	c = toupper(entries[x].name[i]);
	entries[x].name[i] = (char) c;
	}
	for (i = 0; entries [x].val [i] != '\0'; i++) {
	    c = toupper (entries[x].val[i]);
	    entries[x].val[i] = (char) c;
	    }
    }

@  Here I set the options for the returned counter. At a minimum there must be the 
counter file name. If |COUNT| is set and the file does not exist, the initial count 
value is set to |COUNT|. By default |INCR| is assumed to be true, but if it is set 
to false then no auto-incrementing is done.
@d TRUE 1
@d FALSE 0
@< Set options @>=
do_incr = TRUE;
do_count = FALSE;
do_reverse = FALSE;
do_invisible = FALSE;
for (x=0; x <=m ; x++) {
    if (strcmp(entries[x].name,"COUNT") == 0) {
       counter =atoi(entries[x].val);
       do_count = TRUE;
       }
    else if ((strcmp(entries[x].name,"INCR")) == 0) {
       if ((strcmp(entries[x].val,"FALSE")) == 0) {
       	  do_incr = FALSE;
	  }
       }
    else if ((strcmp(entries[x].name,"REVERSE")) == 0) {
       if (strcmp(entries[x].val,"TRUE") == 0) {
       	  do_reverse =TRUE;
	  }
       }
    else if (strcmp(entries[x].name,"INVISIBLE") == 0) {
        if (strcmp(entries[x].val,"TRUE") == 0) {
	       do_invisible =TRUE;
	       }
	}
  }


@ Here I define local variables to handle the counter options.
@< Local variables @>=
int do_incr, do_count, do_reverse, do_invisible; int c, fid;

@ Opening and closing files is complicated. We need to avoid race conditions 
as multiple copies of this routine could be running. I use standard advisory 
locking (POSIX) to prevent this from happening.
@< Open file @>=
@< Stat file first @>
@< Open appropriately @> @;
@< Lock file @> @;
@< Update counter prn @>
@< Unlock and close file @>

@ First I determine if the file even exists.
@< Stat file first @>=
strcpy(working_dir,COUNTER_DIR);
cfile = strcat (working_dir , entries [0].name );
if ((stat(cfile,&buf))<0) {
 file_exists = FALSE; }
else {
 file_exists = TRUE;
}

@ The macro |COUNTER_DIR| is defined in counter.h. It is system specific so I have 
removed it from this code so that systems not having a WEB preprocessor can 
recompile the code.
@< Global |#includes| @> =
#include "counter.h"

@ Here I open the file.
@< Open appropriately @>=
if (file_exists) {
    if ((fd =fopen(cfile,"r+"))≡Λ) {
        printf ("Unable␣to␣open␣counter␣file␣%s\n", cfile );
	exit (1);
	}
    }
else {
if ((fd =fopen(cfile,"w")) == NULL) {
    printf ("Unable␣to␣open␣counter␣file␣%s\n", cfile );
    exit (1);
    }
}
fid = fileno(fd);

@ If I am just reading the counter I just need a shared read lock. If I am also updating
the lock I need an exclusive write lock.
@< Lock file @>=
if (do_incr)
   WRITE_LOCK(fid );
else
   READ_LOCK(fid);

@
@< Update counter prn @>=
if ((!file_exists ) and (do_count )) {
   fprintf (fd , "%d\n", counter );
   }
else {
   fscanf (fd , "%d", &counter );
   if (do_incr) {
      counter++;
      fseek (fd , SEEK_SET, 0);
      fprintf (fd , "%d\n", counter );
      }
  }

@ 
@< Unlock and close file @>=
UN_LOCK(fid );
fclose (fd );


@
@< Local variables@> =
int file_exists;
struct stat_buf;
FILE *fd;
int counter = 0;
char *cfile, working_dir[80];


@* Bitmap Generation.

@ These are neede in the following code.
@< Global |#includes| @>=
#include <unistd.h>
#include <sys/types.h>
#include <ctype.h>
#include <string.h>
#include <math.h>


@ Here I generate the bitmap. The macro |MINLEN| is the minimum number 
of characters to generate. If the number requires more than |MINLEN| 
characters, then it generates them.
@d MINLEN 6
@< Generate bitmap @>=
@< Order digits @>
if (! do_invisible) {
    @< Write digits @>
    }
else {
     @< Write out null image@>
     }

@  Here I order the digits.
@< Order digits @>=
if (counter ≡ 0) {
   x = 1; 
   }
else {
     x = ((int) floor (log10 (counter ))) + 1;
     }
i = 0;
if (x < MINLEN) {
   for (i=0; i<(MINLEN−x); i++) 
       { digits [i] = 0;
   }
   numdigits =MINLEN;
   }
else {
     numdigits = x;
     }
newc = counter; 
while (newc > 0) {
   x−−;
   if (x > 0) 
      powr = ((int) pow (10.0, x)); 
   else powr = 1;
   digits [i] = newc/powr ;
   newc = newc − ( digits[i++]*power);
}

@
@< Local variables @>=
int newc,powr,numdigits,digits[10];
int j, kntr, numbytes, ind;

@
@< Write digits @>=
@< Write x-bitmap header @>
@< Write out first 3 lines of filler @>
@< Write out 10 lines of digits @>
@< Write out last 3 lines of filler @>

@ Standard ascii header for x-bitmap.
@< Write x-bitmap header @>=
printf("Content-type: image/x-xbitmap\n\n");
printf("#define count_width %d\n#define count_height 16\n",numdigits*8);
printf("static char count_bits[] = {\n");

@ Standard ascii header for x-bitmap.
@< Write out null image @>=
printf("Content-type: image/x-xbitmap\n\n");
printf("#define count_width %d\n#define count_height 1\n",numdigits*8);
printf("static char count_bits[] = {\n");
if (do_reverse) printf("0x00};\n");
else printf("0xff};\n");

@
@< Write out first 3 lines of filler @>=
kntr = 0;
if (!do_reverse) filler = "0xff";
else filler = "0x00";
numbytes = 16*8*numbytes;
for (i = 0; i<3; i++) {
    for (j=0;j<numdigits; j++) {
    	printf("%s,",filler);
	kntr++;
	if ((kntr % 8) == 0) printf("\n");
	}
}


@
@< Local variables @>=
char *filler;

@
@< Write out 10 lines of digits @>=
if (do_reverse) {
   for (i=0; i<10; i++) {
       for ( j = 0 ; j < numdigits ;j++ ) {
       ind =digits[j]*10+i;
       printf ("%s,", ibitstream[ind]);
       kntr++;
       if ((kntr % 8) == 0) printf ("\n");
       }
   }
}
else {
     for (i=0; i<10; i++) {
         for ( j = 0 ; j < numdigits;j++ ) {
	 ind =digits[j]*10+i;
	 printf ("%s,", bitstream[ind]); kntr++;
	 if ((kntr % 8) ≡ 0) printf ("\n");
	 }
    }
}

@ Write out last 3 lines of filler.
@< Write out last 3 lines of filler @>=
for ( j = 0 ; j < ( 3 ∗ numdigits−1 ) ; j++ ) {
    printf ("%s,", filler );
    kntr++;
    if ((kntr % 8) ≡ 0) printf ("\n");
    }
if (do reverse ) printf ("0x00};\n");
else printf("0xff};\n");

@
@< Global variables @>=
static char *bitstream[] = {"0xc3","0x99","0x99","0x99","0x99","0x99","0x99","0x99","0x99",
"0xc3", "0xcf", "0xc7", "0xcf", "0xcf", "0xcf", "0xcf", "0xcf", "0xcf", "0xcf", "0xc7",
"0xc3", "0x99", "0x9f", "0x9f", "0xcf", "0xe7", "0xf3", "0xf9", "0xf9", "0x81", "0xc3",
"0x99", "0x9f", "0x9f", "0xc7", "0x9f", "0x9f", "0x9f", "0x99", "0xc3", "0xcf", "0xcf",
"0xc7", "0xc7", "0xcb", "0xcb", "0xcd", "0x81", "0xcf", "0x87", "0x81", "0xf9", "0xf9",
"0xf9", "0xc1", "0x9f", "0x9f", "0x9f", "0x99", "0xc3", "0xc7", "0xf3", "0xf9", "0xf9",
"0xc1", "0x99", "0x99", "0x99", "0x99", "0xc3", "0x81", "0x99", "0x9f", "0x9f", "0xcf",
"0xcf", "0xe7", "0xe7", "0xf3", "0xf3", "0xc3", "0x99", "0x99", "0x99", "0xc3", "0x99",
"0x99", "0x99", "0x99", "0xc3", "0xc3", "0x99", "0x99", "0x99", "0x99", "0x83", "0x9f",
"0x9f", "0xcf", "0xe3"};
static char *ibitstream[] = {"0x3c","0x66","0x66","0x66","0x66","0x66","0x66","0x66",
"0x66", "0x3c", "0x30", "0x38", "0x30", "0x30", "0x30", "0x30", "0x30", "0x30", "0x30",
"0x38", "0x3c", "0x66", "0x60", "0x60", "0x30", "0x18", "0x0c", "0x06", "0x06", "0x7e",
"0x3c", "0x66", "0x60", "0x60", "0x38", "0x60", "0x60", "0x60", "0x66", "0x3c", "0x30",
"0x30", "0x38", "0x38", "0x34", "0x34", "0x32", "0x7e", "0x30", "0x78", "0x7e", "0x06",
"0x06", "0x06", "0x3e", "0x60", "0x60", "0x60", "0x66", "0x3c", "0x38", "0x0c", "0x06",
"0x06", "0x3e", "0x66", "0x66", "0x66", "0x66", "0x3c", "0x7e", "0x66", "0x60", "0x60",
"0x30", "0x30", "0x18", "0x18", "0x0c", "0x0c", "0x3c", "0x66", "0x66", "0x66", "0x3c",
"0x66", "0x66", "0x66", "0x66", "0x3c", "0x3c", "0x66", "0x66", "0x66", "0x66", "0x7c",
"0x60", "0x60", "0x30", "0x1c"};




@ @< Utility functions @>=

@* Index.
